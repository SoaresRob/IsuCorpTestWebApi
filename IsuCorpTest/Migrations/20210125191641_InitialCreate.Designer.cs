// <auto-generated />
using System;
using IsuCorpTest.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IsuCorpTest.Migrations
{
    [DbContext(typeof(IsuCorpTestContext))]
    [Migration("20210125191641_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("IsuCorpTest.Models.Contact", b =>
                {
                    b.Property<long>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<long>("ContactTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ContactId");

                    b.HasIndex("ContactTypeId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("IsuCorpTest.Models.ContactType", b =>
                {
                    b.Property<long>("ContactTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("ContactTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ContactTypeId");

                    b.ToTable("ContactType");
                });

            modelBuilder.Entity("IsuCorpTest.Models.Reservation", b =>
                {
                    b.Property<long>("RevervationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReservationDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RevervationId");

                    b.HasIndex("ContactId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("IsuCorpTest.Models.Contact", b =>
                {
                    b.HasOne("IsuCorpTest.Models.ContactType", null)
                        .WithMany("Contacts")
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IsuCorpTest.Models.Reservation", b =>
                {
                    b.HasOne("IsuCorpTest.Models.Contact", null)
                        .WithMany("Reservation")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IsuCorpTest.Models.Contact", b =>
                {
                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("IsuCorpTest.Models.ContactType", b =>
                {
                    b.Navigation("Contacts");
                });
#pragma warning restore 612, 618
        }
    }
}
